       title: "SPDX v3"
     package: "http://spdx.org/spdx/v3/document"
     version: "spdx-3-model 2023-02-07"
 description: "This information model defines the serialized structure of SPDXv3 logical model types"
     license: "CC0-1.0"
     exports: ["Elements"]
      config: {"$FieldName": "^[a-zA-Z@][_A-Za-z0-9]{0,63}$"}

Elements = ArrayOf(Element) unique                 // Serialized set of Element values

Payload = Record                                   // Serialized file (or equivalent) for transferring Elements
   1 namespace        IRI                          // Default namespace for Element ids in this file (rdf BASE)
   2 prefixes         NamespaceMap optional        // Namespace abbreviations used in this file (rdf PREFIX)
   3 creationInfo     CreationInformation [1..*]   // File creation info and element defaults
   4 elementValue     Element unique [1..*]        // Element values, created in this file or copied
   5 spdxDocumentId   Link(Element) optional       // SpdxDocument element that describes this file

NamespaceMap = MapOf(Prefix, IRI){1..*}

Element = Record
   1 spdxId           Key(IRI)                     // Element unique identifier: local, prefix:local, or absolute-IRI
   2 type             ElementType                  // Element type and type-specific properties
   3 creationInfo     CreationInformation optional // Not really optional ???
   4 name             String optional
   5 summary          String optional
   6 description      String optional
   7 comment          String optional
   8 verifiedUsing    IntegrityMethod [0..*]       // Applies only to Artifacts
   9 externalReference ExternalReference [0..*]
  10 externalIdentifier ExternalIdentifier [0..*]
  11 extension        Extensions optional

ElementType = Choice
   1 agent            Agent                        // <- Element
   2 person           Person                       // <- Agent
   3 organization     Organization                 // <- Agent
   4 softwareAgent    SoftwareAgent                // <- Agent
   5 tool             Tool                         // <- Element
   6 annotation       Annotation                   // <- Element
   7 relationship     Relationship                 // <- Element
   8 lcRelationship   LifecycleScopeRelationship   // <- Relationship
   9 asRelationship   AssessmentRelationship       // <- Relationship
  10 spdxDocument     SpdxDocument                 // <- Collection: A file containing serialized element values
  11 bom              Bom                          // <- Collection
  12 package          Package                      // <- Artifact: pkg:Software
  13 file             File                         // <- Artifact: pkg:Software
  14 snippet          Snippet                      // <- Artifact: pkg:Software
  15 sbom             Sbom                         // <- BOM: pkg:Software
  16 swdRelationship  SoftwareDependencyRelationship // <- Relationship: pkg:Software

Agent = Record                                     // <-Element

Person = Record                                    // <-Agent

Organization = Record                              // <-Agent

SoftwareAgent = Record                             // <-Agent

Tool = Record                                      // <-Element

Annotation = Record                                // <-Element
   1 annotationType   AnnotationType
   2 subject          Link(Element)
   3 statement        String optional
   4 contentType      MediaType optional

Relationship = Record                              // <-Element
   1 relationshipType RelationshipType             // just 'type'
   2 from             Link(Element)
   3 to               Link(Element) [1..*]
   4 completeness     RelationshipCompleteness optional
   5 startTime        DateTime optional
   6 endTime          DateTime optional

SpdxDocument = Record                              // <-Element (context -> summary?)
   1 namespace        IRI optional                 // Default namespace for Element ids in the SPDX file (rdf BASE)
   2 namespaces       NamespaceMap optional        // Namespace abbreviations used in the SPDX file (rdf PREFIX)
   3 element          Link(Element) [1..*]         // Elements contained in the payload
   4 documentRef      Link(Element) [0..*]         // SpdxDocuments containing elements referenced by the payload
   5 downloadLocation URL optional                 // Unique ID or Location of the payload
   6 import           ExternalMap [0..*]           // IRI assignment to non-element hashable data entities

Bom = Record
   1 element          Link(Element) [1..*]         // <-Collection
   2 rootElement      Link(Element) [0..*]         // <-Collection  This element is a root. Other containers that it contains?

Snippet = Record                                   // Everything optional, must have something
   1 byteRange        PositiveIntegerRange optional
   2 lineRange        PositiveIntegerRange optional
   3 purpose          SoftwarePurpose [0..*]
   4 contentIdentifier URI
   5 originatedBy     Link(Element) [0..*]         // <-Artifact:  Link(Agent)
   6 suppliedBy       Link(Element) [0..1]         // <-Artifact:  Link(Agent)

File = Record                                      // <-Artifact, Element/name = required
   1 contentType      MediaType optional
   2 purpose          SoftwarePurpose [0..*]
   3 contentIdentifier URL
   4 originatedBy     Link(Element) [0..*]         // <-Artifact:  Link(Agent)
   5 suppliedBy       Link(Element) [0..1]         // <-Artifact:  Link(Agent)

Package = Record                                   // <-Artifact, Element/name = required
   1 packageVersion   String optional
   2 downloadLocation URL optional
   3 packageUrl       URL optional
   4 homePage         URL optional
   5 purpose          SoftwarePurpose [0..*]
   6 contentIdentifier URI
   7 originatedBy     Link(Element) [0..*]         // <-Artifact:  Link(Agent)
   8 suppliedBy       Link(Element) [0..1]         // <-Artifact:  Link(Agent)

Sbom = Record
   1 sbomType         SbomType
   2 element          Link(Element) [1..*]         // <-Collection
   3 rootElement      Link(Element) [0..*]         // <-Collection

CreationInformation = Record
   1 specVersion      SemVer
   2 profile          ProfileIdentifier [1..*]
   3 created          DateTime
   4 dataLicense      LicenseId
   5 createdBy        Link(Element) [1..*]         // Link(Agent)
   6 createdUsing     Link(Element) [0..*]         // Link(Tool)
   7 comment          String optional

IntegrityMethod = Record
   1 comment          String optional
   2 algorithm        HashAlgorithm
   3 hashValue        Binary{1..*} /x

HashAlgorithm = Enumerated(Enum[Hash])

Hash = Map{1..1}
   1 sha1             Binary /x optional
   2 sha224           Binary /x optional
   3 sha256           Binary /x optional
   4 sha384           Binary /x optional
   5 sha512           Binary /x optional
   6 sha3_224         Binary /x optional
   7 sha3_256         Binary /x optional
   8 sha3_384         Binary /x optional
   9 sha3_512         Binary /x optional
  10 md2              Binary /x optional
  11 md4              Binary /x optional
  12 md5              Binary /x optional
  13 md6_128          Binary /x optional           // Digest length?
  20 spdx_pvc_sha1    Binary /x optional
  21 spdx_pvc_sha256  Binary /x optional
  22 blake2b_256      Binary /x optional
  23 blak32b_384      Binary /x optional
  24 blake2b_512      Binary /x optional
  25 blake3           Binary /x optional

PublicKeySignature = Record

Extensions = MapOf(IRI, String)                    // Extensions are opaque strings

DateTime = String                                  // implement Integer /datetime_ms

MediaType = String

Prefix = String{1..16}                             // Abbreviation for document namespace

SemVer = String{pattern="^(\d{1,4})(\.(\d{1,6})){0,2}$"}  // k.m.n: "3.141592" is valid, "3.14159262" is not.

SnippetLocation = Record

IRI = String /iri

URI = String /uri

URL = String /uri                                  // IRI, must be a locator

ExternalIdentifier = Record
   1 externalIdentifierType ExternalIdentifierType
   2 identifier       String
   3 comment          String optional

ExternalMap = Record
   1 externalId       IRI
   2 verifiedUsing    IntegrityMethod
   3 locationHint     URL optional

ExternalReference = Record
   1 externalReferenceType ExternalReferenceType
   2 locator          IRI                          // URL - must be a locator
   3 contentType      MediaType optional
   4 comment          String optional

SoftwareDependencyRelationship = Record
   1 linkType         DependencyLinkType
   2 scope            DependencyScope
   3 requirement      DependencyRequirement

AnnotationType = Enumerated
   0 other
   1 review

DependencyLinkType = Enumerated
   0 other
   1 noAssertion                                   // default
   2 static
   3 dynamic
   4 tool

DependencyRequirement = Enumerated
   1 noAssertion                                   // default
   2 optional
   3 required
   4 provided
   5 preRequisite

DependencyScope = Enumerated
   0 other
   1 noAssertion                                   // default
   2 build
   3 dev
   4 test

ExternalIdentifierType = Enumerated
   0 other
   1 cpe_2.2
   2 cpe_2.3
   3 email
   4 purl
   5 uri-scheme
   6 swid                                          // deprecate
   7 swhid                                         // deprecate
   8 gitoid                                        // deprecate

ExternalReferenceType = Enumerated
   0 other
   1 altDownloadLocation
   2 altWebPage
   3 securityAdvisory
   4 securityFix
   5 securityOther

LicenseId = Enumerated
   0 CC0-1.0                                       // Fixed value unless others are added

ProfileIdentifier = Enumerated
   1 core
   2 software
   3 licensing
   4 security
   5 build
   6 usage
   7 ai
   8 dataset
   9 service

RelationshipCompleteness = Enumerated
   1 complete                                      // default
   2 incomplete
   3 noAssertion

RelationshipType = Enumerated
   0 other                                         // Meta: element->element comment
   1 describes                                     // Meta: bundle->artifact
   2 amends                                        // Meta: collection->collection
   3 contains                                      // Structure: artifact->artifact
   4 dependsOn                                     // Behavioral: artifact->artifact
   5 patches                                       // Behavioral: artifact->artifact
   6 tests                                         // Behavioral: artifact->artifact
  10 generates                                     // Pedigree: artifact->artifact
  11 expandedFromArchive                           // Pedigree
  12 fileAdded                                     // Pedigree
  13 fileDeleted                                   // Pedigree
  14 fileModified                                  // Pedigree
  15 copy                                          // Pedigree: artifact->artifact
  20 ancestor                                      // Provenance: artifact->artifact
  21 suppliedBy                                    // Provenance: artifact->artifact
  22 variant                                       // Provenance: artifact->artifact

SbomType = Enumerated
   1 TBD

SoftwarePurpose = Enumerated
   0 other
   1 application
   2 archive
   3 bom
   4 configuration
   5 container
   6 data
   7 device
   8 documentation
   9 executable
  10 file
  11 firmware
  12 framework
  13 install
  14 library
  15 module
  16 operatingSystem
  17 patch
  18 source
